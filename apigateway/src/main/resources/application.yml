spring:
  application:
    name: api-gateway

  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: schedule-app-be
            client-secret: 1030df94-abc4-462c-9e9b-71f9b8b1bb23
            scope: openid
            authorization-grant-type: bearer_only

        provider:
          keycloak:
            issuer-uri: ${KEYCLOAK_URL:http://localhost:8888}/auth/realms/IHTAR

  session:
    store-type: redis
  redis:
    host: localhost
    port: 6379
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "http://localhost:9095"
            allowedHeaders: "*"
            allowedMethods:
              - GET
              - POST
              - DELETE
              - PUT
      default-filters:
        - TokenRelay
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 10
            redis-rate-limiter.burstCapacity: 20
            redis-rate-limiter.requestedTokens: 1
      routes:
        - id: meeting-route
          uri: lb://meeting-manager-service
          predicates:
            - Path=/recipients/**
            - Path=/meeting-provider/**
          filters:
#            - name: CircuitBreaker
#              args:
#                name: meeting-manager-service
#                fallbackUri: forward:/meeting-manager-fallback
            - name: Retry
              args:
                retries: 3
                method: GET
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms

resilience4j:
  circuitbreaker:
    instances:
      meetingService:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
        registerHealthIndicator: true
  timelimiter:
    instances:
      meeting-manager-service:
        timeoutDuration: 2s
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
    register-with-eureka: true
  instance:
    preferIpAddress: true
